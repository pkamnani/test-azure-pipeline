# File: deploy-ee.yml
parameters:
- name: EE_LIST # name of the parameter; required
  type: object # data type of the parameter; required
  default:
    - ee-default
    - ee-linux
    # - ee-aws
    - ee-azure
    # - ee-windows
    # - ee-network-cisco
    # - ee-network-juniper
    # - ee-satellite
    # - ee-vmware-satellite
    # - ee-vmware
    #  - ee-solaris

steps:
- task: PowerShell@2
  displayName: "CheckingChangedFiles_in_Root"
  inputs:
    targetType: 'inline'
    script: |
      $files=$(git diff HEAD HEAD~ --name-only)
      $temp=$files -split ' '
      $count=$temp.Length
      For ($i=0; $i -lt $temp.Length; $i++)
      {
        $name=$temp[$i]
        if ($name -like '*deploy-ee.yml*')
        {
          Write-Host "##vso[task.setvariable variable=rootFolderChangesFound]Yes"
          echo "Change detected in main deployment script."
          echo "This function is triggered to build All EE"
          break
        }
        else
        {
          Write-Host "##vso[task.setvariable variable=rootFolderChangesFound]No"
        }
      }

- ${{ each EE in parameters.EE_LIST }}:
  - task: PowerShell@2
    displayName: "CheckingChangedFiles_${{ EE }}"
    inputs:
      targetType: 'inline'
      script: |
        $files=$(git diff HEAD HEAD~ --name-only)
        $temp=$files -split ' '
        $count=$temp.Length
        For ($i=0; $i -lt $temp.Length; $i++)
        {
          $name=$temp[$i]
          if ($name -like 'exec-env/${{ EE }}/*')
          {
            Write-Host "##vso[task.setvariable variable=execEnvFolderChangesFound]Yes"
            echo "Change detected in exec-env/${{ EE }} configuration files."
            echo "This function is triggered to build EE for exec-env/${{ EE }}"
            break
          }
          else
          {
            Write-Host "##vso[task.setvariable variable=execEnvFolderChangesFound]No"
          }
        }

  - task: Bash@3
    displayName: "Build_EE_${{ EE }}"
    condition: or(eq(variables['rootFolderChangesFound'], 'Yes'),eq(variables['execEnvFolderChangesFound'], 'Yes'))
    inputs:
      targetType: script
      script: |
        echo "#############################################################"
        echo "## Processing ${{ EE }} on $(AUTOMATION_HUB_FQDN)"
        echo "#############################################################"
        cat <<EOF > ansible.cfg
        [galaxy]
        server_list = published_repo, rh-certified_repo, community_repo
        ignore_certs = yes
        [galaxy_server.community_repo]
        url=https://$(AUTOMATION_HUB_FQDN)/api/galaxy/content/community/
        token=$(echo $AUTOMATION_HUB_KEY)
        [galaxy_server.published_repo]
        url=https://$(AUTOMATION_HUB_FQDN)/api/galaxy/content/published/
        token=$(echo $AUTOMATION_HUB_KEY)
        [galaxy_server.rh-certified_repo]
        url=https://$(AUTOMATION_HUB_FQDN)/api/galaxy/content/rh-certified/
        token=$(echo $AUTOMATION_HUB_KEY)
        EOF
        cat ansible.cfg
        podman login -u "$(CI_RHN_USER)" -p "$(CI_RHN_PASSWORD)" registry.redhat.io
        cd exec-env/${{ EE }}
        pwd 
        [[ ! -d ./context ]] && mkdir context
#        cp /etc/pki/rpm-gpg/* ./context/
#        ansible-builder build --tag ${{ EE }}-$(ANSIBLE_VERSION):$(Build.SourceVersion) --container-runtime podman -v 3 --no-cache --prune-image
#        podman login -u $(AUTOMATION_HUB_USER) -p $(AUTOMATION_HUB_PASS) $(AUTOMATION_HUB_FQDN) --tls-verify=False
#        podman tag ${{ EE }}-$(ANSIBLE_VERSION):$(Build.SourceVersion) $(AUTOMATION_HUB_FQDN)/${{ EE }}-$(ANSIBLE_VERSION):$(Build.SourceVersion)
#        podman tag ${{ EE }}-$(ANSIBLE_VERSION):$(Build.SourceVersion) $(AUTOMATION_HUB_FQDN)/${{ EE }}-$(ANSIBLE_VERSION):latest
#        podman push $(AUTOMATION_HUB_FQDN)/${{ EE }}-$(ANSIBLE_VERSION):$(Build.SourceVersion) --tls-verify=False
#        podman push $(AUTOMATION_HUB_FQDN)/${{ EE }}-$(ANSIBLE_VERSION):latest --tls-verify=False
#        echo "#############################################################"
#        echo "## Performing Cleanup"
#        echo "#############################################################"
#        for i in `podman images | grep a1lab-pk | awk {'print $3'}`; do podman rmi $i -f; done
#        for i in `podman images | grep none | awk {'print $3'}`; do podman rmi $i -f; done

